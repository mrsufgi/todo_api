// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrsufgi/todo_api/internal/domain (interfaces: TodosRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mrsufgi/todo_api/internal/domain"
	reflect "reflect"
)

// MockTodosRepository is a mock of TodosRepository interface
type MockTodosRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodosRepositoryMockRecorder
}

// MockTodosRepositoryMockRecorder is the mock recorder for MockTodosRepository
type MockTodosRepositoryMockRecorder struct {
	mock *MockTodosRepository
}

// NewMockTodosRepository creates a new mock instance
func NewMockTodosRepository(ctrl *gomock.Controller) *MockTodosRepository {
	mock := &MockTodosRepository{ctrl: ctrl}
	mock.recorder = &MockTodosRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodosRepository) EXPECT() *MockTodosRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method
func (m *MockTodosRepository) CreateTodo(arg0 domain.Todo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo
func (mr *MockTodosRepositoryMockRecorder) CreateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodosRepository)(nil).CreateTodo), arg0)
}

// DeleteTodo mocks base method
func (m *MockTodosRepository) DeleteTodo(arg0 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo
func (mr *MockTodosRepositoryMockRecorder) DeleteTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodosRepository)(nil).DeleteTodo), arg0)
}

// ReadTodo mocks base method
func (m *MockTodosRepository) ReadTodo(arg0 int) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTodo", arg0)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTodo indicates an expected call of ReadTodo
func (mr *MockTodosRepositoryMockRecorder) ReadTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTodo", reflect.TypeOf((*MockTodosRepository)(nil).ReadTodo), arg0)
}

// SearchTodos mocks base method
func (m *MockTodosRepository) SearchTodos() (*[]domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTodos")
	ret0, _ := ret[0].(*[]domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTodos indicates an expected call of SearchTodos
func (mr *MockTodosRepositoryMockRecorder) SearchTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTodos", reflect.TypeOf((*MockTodosRepository)(nil).SearchTodos))
}

// UpdateTodo mocks base method
func (m *MockTodosRepository) UpdateTodo(arg0 int, arg1 domain.Todo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo
func (mr *MockTodosRepositoryMockRecorder) UpdateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodosRepository)(nil).UpdateTodo), arg0, arg1)
}
