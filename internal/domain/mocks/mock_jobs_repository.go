// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrsufgi/todo_api/internal/domain (interfaces: TodosRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mrsufgi/todo_api/internal/domain"
	reflect "reflect"
)

// MockTodosRepository is a mock of TodosRepository interface
type MockTodosRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodosRepositoryMockRecorder
}

// MockTodosRepositoryMockRecorder is the mock recorder for MockTodosRepository
type MockTodosRepositoryMockRecorder struct {
	mock *MockTodosRepository
}

// NewMockTodosRepository creates a new mock instance
func NewMockTodosRepository(ctrl *gomock.Controller) *MockTodosRepository {
	mock := &MockTodosRepository{ctrl: ctrl}
	mock.recorder = &MockTodosRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodosRepository) EXPECT() *MockTodosRepositoryMockRecorder {
	return m.recorder
}

// GetTodo mocks base method
func (m *MockTodosRepository) GetTodo(arg0 string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", arg0)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo
func (mr *MockTodosRepositoryMockRecorder) GetTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodosRepository)(nil).GetTodo), arg0)
}
